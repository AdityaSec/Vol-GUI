#!/usr/bin/python3
import subprocess
import os, re, itertools
from tkinter import *
from tkinter import filedialog, messagebox
from tkinter.constants import SUNKEN
import tkinter.font as font

#If profile is not checked and other button is clicked make sure they check profile first by prompting messagebox.

#Check if volatility exists or not.
if not os.path.exists('volatility/vol.py'):
    print("Cloning Volatility")
    os.system("git clone https://github.com/volatilityfoundation/volatility")
    print("Installing Volatility")
    os.system('cd volatility; sudo python2 setup.py install;cd ..')
    print("Installed Volatility")
    print("Adding Plugins")
    os.system("git clone https://github.com/superponible/volatility-plugins plugins")
    print("Installed Plugins")

#LineBreak
def linebreak():
    ourMessage ='----'
    messageVar = Message(master, text = ourMessage)
    messageVar.config()
    messageVar.pack()

#Opening Dump File    
def browseFiles():
    global filename
    global fpath
    filename = filedialog.askopenfilename(initialdir = "~",title = "Select Dump File",
                                          filetypes = (("All Files","*.*"), ("Text Files",".txt*")))    
    location=filename.split('/')
    file = location[-1]
    file = str(file) + '_analysis'
    del location[-1]
    located = ('/').join(location)
    fpath = os.path.join(located, file)
    
    answer = messagebox.askyesno(title='Confirmation',
                          message='{}\nSure?'.format(filename))       
    if answer:
        if not os.path.isdir(fpath):
            print(' [+] Making Directory')
            os.mkdir(fpath)
    else:
        master.quit

#Fetching Profile
def profile_fetch():
    global profile
    print('Checking Profile')
    f_name = str(fpath) + '/profile.txt'
    if not os.path.exists(f_name):
        cmd = "vol.py -f '{}' imageinfo".format(filename)
        profiledata= subprocess.getoutput(cmd)
        if 'ERROR' in profiledata:
            print('Error Occured')
            exit
        profile = (profiledata.split(':')[3]).split(',')[0].strip(' ')
        print(' [+] Writing Profile')
        f = open(f_name, "w")
        f.write(profile)
        f.close()
    else:
        f = open(f_name, "r")
        profile=f.readline()
        f.close()
    messagebox.showinfo("Profile Found", profile)

#Do not populate data when scan output is there.
def execute():
    if var1.get():
        single_arg_scan('pslist')
    if var2.get():
        single_arg_scan('cmdscan')
        single_arg_scan('consoles')
    if var3.get():
        single_arg_scan('filescan')
    if var4.get():
        single_arg_scan('envars')
    if var5.get():
        single_arg_scan('clipboard')
    if var6.get():
        single_arg_scan('netscan')
        single_arg_scan('sockscan')
    if var7.get():
        single_arg_scan('mftparser')
    if var8.get():
        single_arg_scan('iehistory')
    if var9.get():
        single_arg_scan('services')
    if var10.get():
        single_arg_scan('hashdump')
    if var11.get():
        single_arg_scan('dlllist')
    if var12.get():
        populate_data()
    populate_data()
    
#Executing Commands which requires single argument.
def single_arg_scan(plugin):
    if plugin == 'iehistory':
        cmd = "cat '{}'/pslist_output.txt".format(fpath)
        temp = subprocess.getoutput(cmd)
        if 'chrome.exe' in str(temp):
            try:
                print(' [+] Starting chromehistory Scan')
                cmd1 = "vol.py --plugins=plugins -f '{}' chromehistory".format(filename)  
                plugindata= subprocess.getoutput(cmd1)
                if len(plugindata) > 1:
                    f_name = str(fpath) + '/chromehistory_output.txt'
                    print(' [+] Writing Output Of chromehistory Plugin')
                    f = open(f_name, "w")
                    f.write(plugindata)
                    f.close()
            except:
                print('[!] Error Occured in chromehistory scan')
                print('[!] Please run "{}" command from current directory.'.format(cmd1))
        if 'firefox.exe' in str(temp):
            print(' [+] Starting firefoxhistory Scan')
            cmd1 = "vol.py --plugins=plugins -f '{}' firefoxhistory".format(filename)  
            plugindata= subprocess.getoutput(cmd1)
            if len(plugindata) > 1:
                f_name = str(fpath) + '/firefoxhistory_output.txt'
                print(' [+] Writing Output Of firefoxhistory Plugin')
                f = open(f_name, "w")
                f.write(plugindata)
                f.close()
    print(' [+] Starting {} Scan'.format(plugin))
    cmd2 = 'vol.py -f "{}" --profile={} {}'.format(filename,profile, plugin)
    plugindata= subprocess.getoutput(cmd2)
    if len(plugindata) > 1:
        f_name = str(fpath) + '/{}_output.txt'.format(plugin)
        print(' [+] Writing Output Of {} Plugin'.format(plugin))
        f = open(f_name, "w")
        f.write(plugindata)
        f.close()
    else:
        print('[!] No output for {} Plugin'.format(plugin))
    print('[+] Written')

#Dumping Process/Memory based on PID
def dumper(plugin,pid):
    print(' [+] Starting {} Scan'.format(plugin))
    cmd = "vol.py --profile={} {} --pid={} --dump-dir='{}' -f '{}'".format(profile,plugin,pid,fpath,filename)
    temp = subprocess.run(cmd, shell=True,capture_output=True,text=True, check=True)
    if 'OK' or 'Writing' in str(temp):
        print(' [+] Dumped {} File'.format(pid))
    else:
        print('[!] File Not Available')

#Dumping file based on offset (-Q)
def dumper_file(offset, f_name):
    print(' [+] Starting dumpfiles Scan')
    cmd = "vol.py --profile={} dumpfiles -n --dump-dir='{}' -Q {} -f '{}'".format(profile,fpath, offset,filename)
    temp = subprocess.run(cmd, shell=True,capture_output=True,text=True, check=True)
    if 'ImageSectionObject' or 'DataSectionObject' in str(temp):
        print(' [+] Dumped ' +f_name+ 'File')
    else:
        print('[!] File Not Available')

#Executing Dumper based on selection
def showSelected(typ):
    if str(typ) == "file":
        dmpFile = my_list2.get(ANCHOR)
        showMsg = 'Dumping: '+ dmpFile.split(",")[0]
        print(showMsg)
        #show.config(text=showMsg)
        getOffset = dmpFile.split(":")[1]
        dumper_file(getOffset, dmpFile.split(",")[0])
        
    elif str(typ) == "proc":
        dmpFile = my_list2.get(ANCHOR)
        showMsg = 'Dumping: '+ dmpFile
        #show.config(text=showMsg)
        print(showMsg)
        getPID = dmpFile.split(':')[2]
        print('Dumping PID:',getPID)
        dumper('procdump',getPID )
    elif str(typ) == "mem":
        dmpFile = my_list2.get(ANCHOR)
        showMsg = 'Dumping: '+ dmpFile
        #show.config(text=showMsg)
        print(showMsg)
        getPID = dmpFile.split(':')[2]
        print('Dumping PID:',getPID)
        dumper('memdump', getPID)

#Data parsing of process list
def proc_list():
    cmd1= "cat '{}'/pslist_output.txt |tail -n +4 > '{}'/pslist.txt".format(fpath, fpath)
    os.system(cmd1)
    fname= str(fpath)+'/pslist.txt'
    file1 = open(fname, 'r')
    Lines = file1.readlines()
    count = 0
    processlist=[]
    for line in Lines:
        count += 1
        newline = line.strip()
        s = ' '.join(newline.split())
        chunks = s.split(' ')
        entry = 'Process:'+chunks[1]+' & PID:'+ chunks[2]
        processlist.append(entry)
    return processlist

#Data parsing of process list
def file_list(): 
    cmd2 = "cat '{}'/filescan_output.txt | tail -n +4 > '{}'/filescan.txt".format(fpath, fpath)
    os.system(cmd2)
    fname= str(fpath)+'/filescan.txt'
    file1 = open(fname, 'r')
    Lines = file1.readlines()
    flist=[]
    desktop_filelist=[]
    downloads_filelist=[]
    documents_filelist=[]
    temp_filelist=[]
    music_filelist=[]
    video_filelist=[]
    picture_filelist=[]
    for line in Lines:
        newline = line.strip()
        s = ' '.join(newline.split())
        chunks = s.split(' ')
        offset = chunks.pop(0)
        chunks.pop(0)
        chunks.pop(0)
        chunks.pop(0)
        file_name = ' '.join(chunks)
        entry = offset+', FileName: '+ file_name
        if re.search(r'\\Desktop\\' , entry ):
            desktop_filelist.append(entry)
        if re.search(r'\\Documents\\' , entry ):
            documents_filelist.append(entry)
        if re.search(r'\\Downloads\\' , entry ):
            downloads_filelist.append(entry)
        if re.search(r'\\Temp\\' , entry ):
            temp_filelist.append(entry)
        if re.search(r'\\Pictures\\' , entry ):
            picture_filelist.append(entry)
        if re.search(r'\\Videos\\' , entry ):
            video_filelist.append(entry)
        if re.search(r'\\Music\\' , entry ):
            music_filelist.append(entry)
    flist=list(itertools.chain(desktop_filelist, documents_filelist, downloads_filelist,temp_filelist,picture_filelist,video_filelist,music_filelist ))
    return flist 

def populate_data():
    global dump_files
    global process_dump
    global mem_dump
    global cmdinfo
    global hashdmp
    global browse_hist
    process_dump = proc_list()
    mem_dump = proc_list()
    dump_files = file_list()

def cmd_info():
    populate_data()
    global my_list4
    newWindow = Toplevel(master)
    cmd1 = "cat '{}'/cmdscan_output.txt | tail -n +2 > '{}'/cmdscan.txt".format(fpath, fpath)
    os.system(cmd1)
    newWindow.geometry("700x150")
    newWindow.title("Cmd Prompt Info")
    my_list3 = Listbox(newWindow,height = 6,width = 55)
    my_list3.pack()
    hfile = "{}/cmdscan.txt".format(fpath)
    f = open(hfile,'r')
    Lines = f.readlines()
    for line in Lines:
        newline = line.strip()
        if 'Cmd #' in newline:
            up_line = newline.split(': ')
            if len(up_line[-1]) < 3 or '????' in up_line[-1] or 'Cmd #' in up_line[-1]:
                pass
            else:
                my_list3.insert(END, up_line[-1])

def hash_dump():
    populate_data()
    global my_list3
    newWindow = Toplevel(master)
    cmd1 = 'cat "{}/hashdump_output.txt" | tail -n +2 > "{}/hashdump.txt"'.format(fpath, fpath)
    os.system(cmd1)
    newWindow.geometry("700x150")
    newWindow.title("Hashdump Info")
    my_list3 = Listbox(newWindow,height = 6,width = 55)
    my_list3.pack()
    hfile = '{}/hashdump.txt'.format(fpath)
    f = open(hfile,'r')
    Lines = f.readlines()
    count = 0
    for line in Lines:
        count += 1
        newline = line.strip()
        my_list3.insert(END, newline)

def browser_history():
    populate_data()
    #Note- chrome,firefox history plugin dont need profile
    global my_list1
    newWindow = Toplevel(master)
    newWindow.title("Browser History")
    # sets the geometry of toplevel
    newWindow.geometry("600x200")
    my_list1 = Listbox(newWindow,height = 10,width = 65)
    my_list1.pack()
    urllist= []
    if os.path.exists(str(fpath)+'/chromehistory_output.txt'):
        cmd = 'cat "{}/chromehistory_output.txt" | tail -n +4 > "{}/chromehistory.txt"'.format(fpath,fpath)
        os.system(cmd)
        fname= '{}/chromehistory.txt'.format(fpath)
        file1 = open(fname, 'r')
        Lines = file1.readlines()
        count = 0
        for line in Lines:
            count += 1
            newline = line.strip()
            s = ','.join(newline.split())
            chunks = s.split(',')
            entry = 'URL: '+chunks[1]
            urllist.append(entry)
    if os.path.exists(str(fpath)+'/firefoxhistory_output.txt'):
        cmd = "cat '{}'/firefoxhistory_output.txt | tail -n +4 > '{}'/firefoxhistory.txt".format(fpath,fpath)
        os.system(cmd)
        fname= "{}/firefoxhistory.txt".format(fpath)
        file1 = open(fname, 'r')
        Lines = file1.readlines()
        count = 0
        for line in Lines:
            count += 1
            newline = line.strip()
            s = ','.join(newline.split())
            chunks = s.split(',')
            entry = 'URL: '+chunks[1]
            urllist.append(entry)
    if os.path.exists(str(fpath)+'/iehistory_output.txt'):
        cmd = "cat '{}'/iehistory_output.txt | grep Visited | cut -d '@' -f 2 > '{}'/iehistory.txt".format(fpath,fpath)
        os.system(cmd)
        fname= "{}/iehistory.txt".format(fpath)
        file1 = open(fname, 'r')
        Lines = file1.readlines()
        count = 0
        for line in Lines:
            entry = 'URL: '+line
            urllist.append(entry)
    for lnk in urllist:
        my_list1.insert(END, lnk)

def dumpFileWindow(typ1):
    populate_data()
    global my_list2
    newWindow = Toplevel(master)
     
    # sets the geometry of toplevel
    newWindow.geometry("600x220")
    my_list2 = Listbox(newWindow,height = 9,width = 55)
    my_list2.pack()
    if str(typ1)=="file":
        newWindow.title("Dump Files")
        for item in dump_files:
            my_list2.insert(END, str(item.split("\\")[-4])+str("\\")+str(item.split("\\")[-3])+str("\\")+str(item.split("\\")[-2])+str("\\")+str(item.split("\\")[-1])+' ,             Offset:'+str(item.split(",")[0]))
    if str(typ1)=="proc":
        newWindow.title("Dump Process")
        for item in process_dump:
	        my_list2.insert(END, item)
    if str(typ1)=="mem":
        newWindow.title("Dump Memory")
        for item in mem_dump:
            my_list2.insert(END, item)
    buttonExample = Button(newWindow, text = "Dump File",command=lambda:showSelected(typ1))
    buttonExample.pack()

def showInfoWindow(typ1):
    global my_list2
    newWindow = Toplevel(master)
    # sets the geometry of toplevel
    newWindow.geometry("600x200")
    my_list2 = Listbox(newWindow,height = 9,width = 55)
    my_list2.pack()
    if str(typ1)=="cmd":
        for item in dump_files:
            my_list2.insert(END, str(item.split("\\")[-4])+str("\\")+str(item.split("\\")[-3])+str("\\")+str(item.split("\\")[-2])+str("\\")+str(item.split("\\")[-1])+' ,             Offset:'+str(item.split(",")[0]))
    if str(typ1)=="history":
        for item in process_dump:
	        my_list2.insert(END, item)
    if str(typ1)=="hash":
        for item in mem_dump:
            my_list2.insert(END, item)
    buttonExample = Button(newWindow, text = "Dump File",command=lambda:showSelected(typ1))
    buttonExample.pack()

#Searching
def findtext():
    found = 0
    tosearch = modify.get()
    print(' [+] Searching {}'.format(tosearch))
    for root,d_names,f_names in os.walk(fpath):
        filenames=f_names
    for i in filenames:
        ff = str(fpath)+'/'+str(i)
        if '_output.txt' in ff:
            myfile = open(ff, "r")
            flag = 0
            index = 0
            for line in myfile:
                index += 1
                if tosearch in line:
                    flag = 1
                    break
            if flag == 0: 
                pass 
            else: 
                print(' [+] String', tosearch, 'Found In Line', index, 'in', i)
                found = 1
            myfile.close()
    if found != 1:
        print('[!] {} Not Available'.format(tosearch))

# Setting up GUI
master = Tk()
master.option_add('*Font', '25')
master.title("Vol-GUI by D3v1LaL")
master.geometry("550x910")
menu = Menu(master)
master.config(menu=menu)
filemenu = Menu(menu)

myFont = font.Font(size=12, weight='bold')

button = Button(master, text='Choose File', width=25, command=lambda:browseFiles())
button['font'] = myFont
button.pack(ipady=7)

linebreak()

button = Button(master, text='Check Profile', width=25, command=lambda:profile_fetch())
button['font'] = myFont
button.pack(ipady=7)

linebreak()

frame = LabelFrame(master, text='Select Profile', padx=22, bg= '#dddddd')
frame['font'] = myFont
frame.pack()
var1 = IntVar()
Checkbutton(frame, text="Process Scan",variable=var1,  onvalue=1 ).pack(anchor=W)
var2 = IntVar()
Checkbutton(frame, text="Command Line Scan",variable=var2, onvalue=2).pack(anchor=W)
var3 = IntVar()
Checkbutton(frame, text="File Scan",variable=var3, onvalue=3).pack(anchor=W)
var4 = IntVar()
Checkbutton(frame, text="Environment Variables", variable=var4, onvalue=4).pack(anchor=W)
var5 = IntVar()
Checkbutton(frame, text="Clipboard", variable=var5, onvalue=4).pack(anchor=W)
var6 = IntVar()
Checkbutton(frame, text="Network Connections", variable=var6, onvalue=4).pack(anchor=W)
var7 = IntVar()
Checkbutton(frame, text="Master File Table", variable=var7, onvalue=4).pack(anchor=W)
var8 = IntVar()
Checkbutton(frame, text="Browser History", variable=var8, onvalue=4).pack(anchor=W)
var9 = IntVar()
Checkbutton(frame, text="Services", variable=var9, onvalue=4).pack(anchor=W)
var10 = IntVar()
Checkbutton(frame, text="Hash Dump", variable=var10, onvalue=4).pack(anchor=W)
var11 = IntVar()
Checkbutton(frame, text="Dll List", variable=var11, onvalue=4).pack(anchor=W)
var12 = IntVar()
Checkbutton(frame, text="Populate Data", variable=var12, onvalue=4).pack(anchor=W)

button = Button(master, text='Execute', command=lambda:execute() ,padx=20, pady=5)
button['font'] = myFont
button.pack(pady=10)

linebreak()

#Searching Part
Frm = Frame(master)
Label(Frm,text='Enter to search:').pack(side=LEFT)
modify = Entry(Frm)
modify.pack(side=LEFT, fill=BOTH, expand=1)
modify.focus_set()
buttn = Button(Frm, text='Search',command=lambda:findtext())
buttn['font'] = myFont
buttn.pack(side=RIGHT)
Frm.pack(side=TOP)

btn = Button(master,
             text ="Dump Files",
             command = lambda:dumpFileWindow('file'))
btn['font'] = myFont
btn.pack(pady = 10)

btn1 = Button(master,
             text ="Dump Process",
             command = lambda:dumpFileWindow('proc'))
btn1['font'] = myFont
btn1.pack(pady = 10)

btn2 = Button(master,
             text ="Dump Memory",
             command = lambda:dumpFileWindow('mem'))
btn2['font'] = myFont
btn2.pack(pady = 10)

btn3 = Button(master,
             text ="Browser History",
             command = lambda:browser_history())
btn3['font'] = myFont
btn3.pack(pady = 10)

btn4 = Button(master,
             text ="Hashdump Info",
             command = lambda:hash_dump())
btn4['font'] = myFont
btn4.pack(pady = 10)

btn5 = Button(master,
             text ="Cmd Prompt Info",
             command = lambda:cmd_info())
btn5['font'] = myFont
btn5.pack(pady = 10)

# Let the window wait for any events
mainloop()
